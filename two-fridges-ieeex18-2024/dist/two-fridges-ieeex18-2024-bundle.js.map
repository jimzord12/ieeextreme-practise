{
  "version": 3,
  "sources": ["../entry.ts", "../utils.ts", "../main.ts"],
  "sourcesContent": ["import readline from \"readline\";\r\nimport { StdinInput } from \"./types.js\";\r\nimport { main } from \"./main.js\";\r\n\r\nconst rl = readline.createInterface({\r\n  input: process.stdin,\r\n  output: process.stdout,\r\n});\r\n\r\nconst stdinInput: StdinInput = {\r\n  inputStdin: \"\",\r\n  inputCursor: 0,\r\n};\r\n\r\n// Reading the input from the standard input\r\nrl.on(\"line\", (input: string) => {\r\n  stdinInput.inputStdin += input + \"\\n\";\r\n});\r\n\r\n// Main function that is called after reading the input\r\nrl.on(\"close\", () => {\r\n  main(stdinInput);\r\n});\r\n", "import { StdinInput, Substance } from \"./types.js\";\r\n\r\nconst isWhitespace = (character: string): boolean =>\r\n  \" \\t\\n\\r\\v\".includes(character);\r\n\r\nconst clearWhitespaces = (stdinInput: StdinInput): void => {\r\n  while (\r\n    stdinInput.inputCursor < stdinInput.inputStdin.length &&\r\n    isWhitespace(stdinInput.inputStdin[stdinInput.inputCursor])\r\n  ) {\r\n    stdinInput.inputCursor++;\r\n  }\r\n};\r\n\r\nconst nextString = (stdinInput: StdinInput): string => {\r\n  clearWhitespaces(stdinInput);\r\n  let nextString = \"\";\r\n  while (\r\n    stdinInput.inputCursor < stdinInput.inputStdin.length &&\r\n    !isWhitespace(stdinInput.inputStdin[stdinInput.inputCursor])\r\n  ) {\r\n    nextString += stdinInput.inputStdin[stdinInput.inputCursor++];\r\n  }\r\n  return nextString;\r\n};\r\n\r\nconst nextInt = (stdinInput: StdinInput): number =>\r\n  parseInt(nextString(stdinInput), 10);\r\n\r\nconst nextFloat = (stdinInput: StdinInput): number =>\r\n  parseFloat(nextString(stdinInput));\r\n\r\nconst nextChar = (stdinInput: StdinInput): string => {\r\n  clearWhitespaces(stdinInput);\r\n  return stdinInput.inputCursor < stdinInput.inputStdin.length\r\n    ? stdinInput.inputStdin[stdinInput.inputCursor++]\r\n    : \"\\0\";\r\n};\r\n\r\nexport const roundTo = (n: number, digits: number = 0) => {\r\n  const multiplicator = Math.pow(10, digits);\r\n  n = parseFloat((n * multiplicator).toFixed(11));\r\n  return Math.round(n) / multiplicator;\r\n};\r\n\r\nexport const hasCommonTemp = (substance1: Substance, substance2: Substance) => {\r\n  return (\r\n    substance1.lowTemp <= substance2.highTemp &&\r\n    substance1.highTemp >= substance2.lowTemp\r\n  );\r\n};\r\n\r\nexport {\r\n  isWhitespace,\r\n  clearWhitespaces,\r\n  nextString,\r\n  nextInt,\r\n  nextFloat,\r\n  nextChar,\r\n};\r\n", "import { Fridge, StdinInput, Substance } from \"./types.js\";\r\nimport { hasCommonTemp, nextInt } from \"./utils.js\";\r\n\r\nconst checkAndPutToFridge = (s: Substance, f1: Fridge, f2: Fridge) => {\r\n  // if the 1st fridge is empty, put the substance in it\r\n  if (f1.substances.length === 0) {\r\n    f1.substances.push(s);\r\n    f1.lowTemp = s.lowTemp;\r\n    f1.highTemp = s.highTemp;\r\n    return 1;\r\n  }\r\n\r\n  // Check if the substance can be put in the 1st fridge\r\n  if (hasCommonTemp(f1, s)) {\r\n    f1.substances.push(s);\r\n    f1.lowTemp = Math.max(f1.lowTemp, s.lowTemp);\r\n    f1.highTemp = Math.min(f1.highTemp, s.highTemp);\r\n    return 1;\r\n  }\r\n\r\n  // if the 2nd fridge is empty, put the substance in it\r\n  if (f2.substances.length === 0) {\r\n    f2.substances.push(s);\r\n    f2.lowTemp = s.lowTemp;\r\n    f2.highTemp = s.highTemp;\r\n    return 1;\r\n  }\r\n\r\n  // Check if the substance can be put in the 2nd fridge\r\n  if (hasCommonTemp(f2, s)) {\r\n    f2.substances.push(s);\r\n    f2.lowTemp = Math.max(f2.lowTemp, s.lowTemp);\r\n    f2.highTemp = Math.min(f2.highTemp, s.highTemp);\r\n    return 1;\r\n  }\r\n\r\n  // if the substance can't be put in any fridge, return -1\r\n\r\n  // console.log(\"The substance can't be put in any fridge: \", s);\r\n  return -1;\r\n};\r\n\r\nexport function main(stdinInput: StdinInput): void {\r\n  // For this template, the Pirates Challenge will be used as an example: https://csacademy.com/ieeextreme-practice/task/pirates/statement/\r\n\r\n  // The whole main()'s body should be replaced with the actual solution logic.\r\n\r\n  // Parse input for the challenge\r\n  const N: number = nextInt(stdinInput); // Number of substances\r\n\r\n  if (N > 100 || N <= 0) {\r\n    console.log(-1);\r\n    return;\r\n  }\r\n\r\n  const substances: Substance[] = [];\r\n\r\n  // console.log(\"The Inputs: [M]: \", M);\r\n  // console.log(\"The Inputs: [Q]: \", Q);\r\n\r\n  // Parse the strings containing symbols that represent the types of map tiles.\r\n  for (let i = 0; i < N; i++) {\r\n    const s_low: number = nextInt(stdinInput);\r\n    const s_high: number = nextInt(stdinInput);\r\n\r\n    if (s_low < -100 || s_low > 100 || s_high < -100 || s_high > 100) {\r\n      console.log(-1);\r\n      return;\r\n    }\r\n\r\n    substances.push({ lowTemp: s_low, highTemp: s_high });\r\n  }\r\n\r\n  const fidge1: Fridge = { substances: [], lowTemp: 0, highTemp: 0 };\r\n  const fidge2: Fridge = { substances: [], lowTemp: 0, highTemp: 0 };\r\n  let cannotStore: boolean = false;\r\n\r\n  substances.every((substance) => {\r\n    cannotStore = checkAndPutToFridge(substance, fidge1, fidge2) === -1;\r\n    // console.log(\"\\n\\nFridge 1: \", fidge1);\r\n    // console.log(\"Fridge 2: \", fidge2);\r\n    // console.log(\"Cannot Store: \", cannotStore);\r\n    // console.log(\"Substance: \", substance);\r\n    return !cannotStore;\r\n  });\r\n\r\n  if (cannotStore) {\r\n    console.log(-1);\r\n    return;\r\n  }\r\n\r\n  if (fidge2.substances.length === 0) {\r\n    console.log(`${fidge1.lowTemp} ${fidge1.lowTemp}`);\r\n  } else {\r\n    console.log(`${fidge1.lowTemp} ${fidge2.lowTemp}`);\r\n  }\r\n}\r\n// main({ inputStdin: \"2\\n10 12\\n20 24\\n\", inputCursor: 0 });\r\n// main({ inputStdin: \"4\\n-54 -40\\n-50 -42\\n36 77\\n49 100\\n\", inputCursor: 0 });\r\n\r\n// 4\r\n// -54 -40\r\n// -50 -42\r\n// 36 77\r\n// 49 100\r\n\r\n// main({ inputStdin: \"3\\n-10 10\\n-5 5\\n0 5\\n\", inputCursor: 0 });\r\n// main({ inputStdin: \"1\\n-10 10\", inputCursor: 0 });\r\n\r\n// 3\r\n// -10 -5\r\n// 0 5\r\n// 10 15\r\n\r\n// 3\r\n// -10 10\r\n// -5 5\r\n// 0 5\r\n\r\n// 2\r\n// -50 -30\r\n// 30 50\r\n"],
  "mappings": "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",
  "names": ["stdinInput", "nextString", "stdinInput", "readline"]
}

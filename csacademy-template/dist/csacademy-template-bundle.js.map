{
  "version": 3,
  "sources": ["../entry.ts", "../utils.ts", "../main.ts"],
  "sourcesContent": ["import readline from \"readline\";\r\nimport { StdinInput } from \"./types\";\r\nimport { main } from \"./main\";\r\n\r\nconst rl = readline.createInterface({\r\n  input: process.stdin,\r\n  output: process.stdout,\r\n});\r\n\r\nconst stdinInput: StdinInput = {\r\n  inputStdin: \"\",\r\n  inputCursor: 0,\r\n};\r\n\r\n// Reading the input from the standard input\r\nrl.on(\"line\", (input: string) => {\r\n  stdinInput.inputStdin += input + \"\\n\";\r\n});\r\n\r\n// Main function that is called after reading the input\r\nrl.on(\"close\", () => {\r\n  main(stdinInput);\r\n});\r\n", "import { StdinInput } from \"./types\";\r\n\r\nconst isWhitespace = (character: string): boolean =>\r\n  \" \\t\\n\\r\\v\".includes(character);\r\n\r\nconst clearWhitespaces = (stdinInput: StdinInput): void => {\r\n  while (\r\n    stdinInput.inputCursor < stdinInput.inputStdin.length &&\r\n    isWhitespace(stdinInput.inputStdin[stdinInput.inputCursor])\r\n  ) {\r\n    stdinInput.inputCursor++;\r\n  }\r\n};\r\n\r\nconst nextString = (stdinInput: StdinInput): string => {\r\n  clearWhitespaces(stdinInput);\r\n  let nextString = \"\";\r\n  while (\r\n    stdinInput.inputCursor < stdinInput.inputStdin.length &&\r\n    !isWhitespace(stdinInput.inputStdin[stdinInput.inputCursor])\r\n  ) {\r\n    nextString += stdinInput.inputStdin[stdinInput.inputCursor++];\r\n  }\r\n  return nextString;\r\n};\r\n\r\nconst nextInt = (stdinInput: StdinInput): number =>\r\n  parseInt(nextString(stdinInput), 10);\r\n\r\nconst nextFloat = (stdinInput: StdinInput): number =>\r\n  parseFloat(nextString(stdinInput));\r\n\r\nconst nextChar = (stdinInput: StdinInput): string => {\r\n  clearWhitespaces(stdinInput);\r\n  return stdinInput.inputCursor < stdinInput.inputStdin.length\r\n    ? stdinInput.inputStdin[stdinInput.inputCursor++]\r\n    : \"\\0\";\r\n};\r\n\r\nexport {\r\n  isWhitespace,\r\n  clearWhitespaces,\r\n  nextString,\r\n  nextInt,\r\n  nextFloat,\r\n  nextChar,\r\n};\r\n", "import { Query, StdinInput } from \"./types\";\r\nimport { nextInt, nextString } from \"./utils\";\r\n\r\nexport function main(stdinInput: StdinInput): void {\r\n  // For this template example we will be using the Pirates Challenge: https://csacademy.com/ieeextreme-practice/task/pirates/statement/\r\n\r\n  // Parse input for the Pirates challenge\r\n  const N: number = nextInt(stdinInput); // Map rows\r\n  const M: number = nextInt(stdinInput); // Map columns\r\n  const Q: number = nextInt(stdinInput); // Number of queries\r\n\r\n  console.log(\"The Inputs: [N]: \", N);\r\n  console.log(\"The Inputs: [M]: \", M);\r\n  console.log(\"The Inputs: [Q]: \", Q);\r\n\r\n  const map: string[] = [];\r\n  for (let i = 0; i < N; i++) {\r\n    map.push(nextString(stdinInput));\r\n  }\r\n\r\n  console.log(\"\\nMap: \", map);\r\n\r\n  const queries: Query[] = [];\r\n  for (let i = 0; i < Q; i++) {\r\n    const x1: number = nextInt(stdinInput);\r\n    const y1: number = nextInt(stdinInput);\r\n    const x2: number = nextInt(stdinInput);\r\n    const y2: number = nextInt(stdinInput);\r\n    queries.push({ x1, y1, x2, y2 });\r\n  }\r\n\r\n  // Example output for each query (replace with actual solution logic)\r\n  queries.forEach((query) => {\r\n    console.log(\r\n      `\\nQuery from (${query.x1}, ${query.y1}) to (${query.x2}, ${query.y2})`\r\n    );\r\n  });\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,sBAAqB;;;ACErB,IAAM,eAAe,CAAC,cACpB,WAAY,SAAS,SAAS;AAEhC,IAAM,mBAAmB,CAACA,gBAAiC;AACzD,SACEA,YAAW,cAAcA,YAAW,WAAW,UAC/C,aAAaA,YAAW,WAAWA,YAAW,WAAW,CAAC,GAC1D;AACA,IAAAA,YAAW;AAAA,EACb;AACF;AAEA,IAAM,aAAa,CAACA,gBAAmC;AACrD,mBAAiBA,WAAU;AAC3B,MAAIC,cAAa;AACjB,SACED,YAAW,cAAcA,YAAW,WAAW,UAC/C,CAAC,aAAaA,YAAW,WAAWA,YAAW,WAAW,CAAC,GAC3D;AACA,IAAAC,eAAcD,YAAW,WAAWA,YAAW,aAAa;AAAA,EAC9D;AACA,SAAOC;AACT;AAEA,IAAM,UAAU,CAACD,gBACf,SAAS,WAAWA,WAAU,GAAG,EAAE;;;ACxB9B,SAAS,KAAKE,aAA8B;AAIjD,QAAM,IAAY,QAAQA,WAAU;AACpC,QAAM,IAAY,QAAQA,WAAU;AACpC,QAAM,IAAY,QAAQA,WAAU;AAEpC,UAAQ,IAAI,qBAAqB,CAAC;AAClC,UAAQ,IAAI,qBAAqB,CAAC;AAClC,UAAQ,IAAI,qBAAqB,CAAC;AAElC,QAAM,MAAgB,CAAC;AACvB,WAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AAC1B,QAAI,KAAK,WAAWA,WAAU,CAAC;AAAA,EACjC;AAEA,UAAQ,IAAI,WAAW,GAAG;AAE1B,QAAM,UAAmB,CAAC;AAC1B,WAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AAC1B,UAAM,KAAa,QAAQA,WAAU;AACrC,UAAM,KAAa,QAAQA,WAAU;AACrC,UAAM,KAAa,QAAQA,WAAU;AACrC,UAAM,KAAa,QAAQA,WAAU;AACrC,YAAQ,KAAK,EAAE,IAAI,IAAI,IAAI,GAAG,CAAC;AAAA,EACjC;AAGA,UAAQ,QAAQ,CAAC,UAAU;AACzB,YAAQ;AAAA,MACN;AAAA,cAAiB,MAAM,EAAE,KAAK,MAAM,EAAE,SAAS,MAAM,EAAE,KAAK,MAAM,EAAE;AAAA,IACtE;AAAA,EACF,CAAC;AACH;;;AFjCA,IAAM,KAAK,gBAAAC,QAAS,gBAAgB;AAAA,EAClC,OAAO,QAAQ;AAAA,EACf,QAAQ,QAAQ;AAClB,CAAC;AAED,IAAM,aAAyB;AAAA,EAC7B,YAAY;AAAA,EACZ,aAAa;AACf;AAGA,GAAG,GAAG,QAAQ,CAAC,UAAkB;AAC/B,aAAW,cAAc,QAAQ;AACnC,CAAC;AAGD,GAAG,GAAG,SAAS,MAAM;AACnB,OAAK,UAAU;AACjB,CAAC;",
  "names": ["stdinInput", "nextString", "stdinInput", "readline"]
}

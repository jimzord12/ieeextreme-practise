{
  "version": 3,
  "sources": ["../entry.ts", "../utils.ts", "../main.ts"],
  "sourcesContent": ["import readline from \"readline\";\r\nimport { StdinInput } from \"./types.js\";\r\nimport { main } from \"./main.js\";\r\n\r\nconst rl = readline.createInterface({\r\n  input: process.stdin,\r\n  output: process.stdout,\r\n});\r\n\r\nconst stdinInput: StdinInput = {\r\n  inputStdin: \"\",\r\n  inputCursor: 0,\r\n};\r\n\r\n// Reading the input from the standard input\r\nrl.on(\"line\", (input: string) => {\r\n  stdinInput.inputStdin += input + \"\\n\";\r\n});\r\n\r\n// Main function that is called after reading the input\r\nrl.on(\"close\", () => {\r\n  main(stdinInput);\r\n});\r\n", "import { createHash } from \"crypto\";\r\nimport { StdinInput } from \"./types.js\";\r\n\r\nconst isWhitespace = (character: string): boolean =>\r\n  \" \\t\\n\\r\\v\".includes(character);\r\n\r\nconst clearWhitespaces = (stdinInput: StdinInput): void => {\r\n  while (\r\n    stdinInput.inputCursor < stdinInput.inputStdin.length &&\r\n    isWhitespace(stdinInput.inputStdin[stdinInput.inputCursor])\r\n  ) {\r\n    stdinInput.inputCursor++;\r\n  }\r\n};\r\n\r\nconst nextString = (stdinInput: StdinInput): string => {\r\n  clearWhitespaces(stdinInput);\r\n  let nextString = \"\";\r\n  while (\r\n    stdinInput.inputCursor < stdinInput.inputStdin.length &&\r\n    !isWhitespace(stdinInput.inputStdin[stdinInput.inputCursor])\r\n  ) {\r\n    nextString += stdinInput.inputStdin[stdinInput.inputCursor++];\r\n  }\r\n  return nextString;\r\n};\r\n\r\nconst nextInt = (stdinInput: StdinInput): number =>\r\n  parseInt(nextString(stdinInput), 10);\r\n\r\nconst nextFloat = (stdinInput: StdinInput): number =>\r\n  parseFloat(nextString(stdinInput));\r\n\r\nconst nextChar = (stdinInput: StdinInput): string => {\r\n  clearWhitespaces(stdinInput);\r\n  return stdinInput.inputCursor < stdinInput.inputStdin.length\r\n    ? stdinInput.inputStdin[stdinInput.inputCursor++]\r\n    : \"\\0\";\r\n};\r\n\r\nexport const roundTo = (n: number, digits: number = 0) => {\r\n  const multiplicator = Math.pow(10, digits);\r\n  n = parseFloat((n * multiplicator).toFixed(11));\r\n  return Math.round(n) / multiplicator;\r\n};\r\n\r\nexport const hashTable = (table: number[][]) => {\r\n  const hash = createHash(\"md5\");\r\n  return hash.update(table.flat().join(\"\")).digest(\"hex\");\r\n};\r\n\r\nexport {\r\n  isWhitespace,\r\n  clearWhitespaces,\r\n  nextString,\r\n  nextInt,\r\n  nextFloat,\r\n  nextChar,\r\n};\r\n", "import { StdinInput } from \"./types.js\";\r\nimport { hashTable, nextInt, nextString } from \"./utils.js\";\r\nimport { forEach, has, reverse } from \"lodash\";\r\n\r\nexport function main(stdinInput: StdinInput): void {\r\n  const N = nextInt(stdinInput);\r\n\r\n  if (N < 1 || N > 2000) console.log(0);\r\n  const A: Set<number> = new Set();\r\n  const B: Set<number> = new Set();\r\n\r\n  for (let i = 0; i < 2; i++) {\r\n    const amount_of_restrictions_per_row = nextInt(stdinInput);\r\n    for (let j = 0; j < amount_of_restrictions_per_row; j++) {\r\n      if (i === 0) A.add(nextInt(stdinInput));\r\n      else B.add(nextInt(stdinInput));\r\n    }\r\n  }\r\n  const table = createIncreasingTable(N);\r\n\r\n  findRootNode(table, A, B);\r\n\r\n  const checkedTablesHashes: Set<string> = new Set([hashTable(table)]);\r\n  // let queque: number[][] = [];\r\n  let current = table;\r\n\r\n  for (let i = 0; i < N - 1; i++) {\r\n    let a = current[0][i + 1];\r\n    let b = current[1][i];\r\n\r\n    // console.log(`(${i}) - ${a} - ${b}`);\r\n    if (A.has(a) || B.has(b)) continue;\r\n\r\n    current[0][i + 1] = b;\r\n    current[1][i] = a;\r\n\r\n    const hash = hashTable(current);\r\n\r\n    // console.log(`(${i}) - ${hash} - ${current}`);\r\n\r\n    if (!checkedTablesHashes.has(hash)) {\r\n      checkedTablesHashes.add(hash);\r\n    }\r\n  }\r\n\r\n  console.log(checkedTablesHashes.size);\r\n}\r\n\r\nconst findRootNode = (table: number[][], A: Set<number>, B: Set<number>) => {\r\n  A.forEach((value) => {\r\n    if (!table[0].includes(value)) {\r\n      table[0].push(value);\r\n      table[0].sort((a, b) => a - b);\r\n      const elToRemove = findElementToRemoveForFirstRow(table[0], A);\r\n      table[0].splice(table[0].indexOf(elToRemove!), 1);\r\n      table[0].reverse();\r\n      table[1].push(elToRemove!);\r\n      table[1].sort((a, b) => a - b);\r\n      table[1].splice(table[1].indexOf(value), 1);\r\n    }\r\n  });\r\n\r\n  B.forEach((value, index) => {\r\n    if (!table[1].includes(value)) {\r\n      table[1].push(value);\r\n      table[1].sort((a, b) => a - b);\r\n      const elToRemove = findElementToRemoveForSecondRow(table[1], B);\r\n      table[1].splice(table[1].indexOf(elToRemove!), 1);\r\n      table[0].push(elToRemove!);\r\n      table[0].sort((a, b) => a - b);\r\n      table[0].splice(table[0].indexOf(value), 1);\r\n    }\r\n  });\r\n};\r\n\r\nconst findElementToRemoveForFirstRow = (row: number[], A: Set<number>) => {\r\n  // const selectedEl = row[insertedIndex];\r\n  let toBeRemoved;\r\n\r\n  row.reverse().every((el, i) => {\r\n    if (A.has(el)) return true;\r\n    if (!A.has(el)) {\r\n      toBeRemoved = el;\r\n      return false;\r\n    }\r\n  });\r\n\r\n  return toBeRemoved;\r\n};\r\n\r\nconst findElementToRemoveForSecondRow = (row: number[], B: Set<number>) => {\r\n  let toBeRemoved;\r\n\r\n  row.every((el, i) => {\r\n    if (B.has(el)) return true;\r\n    if (!B.has(el)) {\r\n      toBeRemoved = el;\r\n      return false;\r\n    }\r\n  });\r\n\r\n  return toBeRemoved;\r\n};\r\n\r\nconst createIncreasingTable = (cols: number) => {\r\n  const row2 = new Array(cols * 2).fill(0).map((_, i) => i + 1);\r\n  const row1 = row2.splice(0, row2.length / 2);\r\n  return [row1, row2];\r\n};\r\n"],
  "mappings": "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",
  "names": ["stdinInput", "nextString", "stdinInput", "readline"]
}
